html {
  --sgbp-input-error-color: var(--sgbp-color-error);
  --sgbp-input-valid-color: var(--sgbp-color-success);

  --sgbp-input-type-range-thumb-color: var(--sgbp-color-black);
  --sgbp-input-type-range-thumb-margin: -7px;
  --sgbp-input-type-range-thumb-diameter: 16px;
  --sgbp-input-type-range-track-color: var(--sgbp-color-gray-medium);
  --sgbp-input-type-range-track-height: 2px;
}

.sgbp-input {
  flex: 1 1 0;
  width: 100%;

  outline: 0;
  padding-right: var(--sgbp-input-padding-horizontal);
  padding-left: var(--sgbp-input-padding-horizontal);
  height: var(--sgbp-input-height);

  background-color: var(--sgbp-input-background-color);
  border-style: solid;
  border-radius: var(--sgbp-input-border-radius);
  border-width: var(--sgbp-input-border-width);
  border-color: var(--sgbp-input-border-color);
  color: var(--sgbp-input-color);

  &:focus {
    border-color: var(--sgbp-input-border-color-focus);
  }

  // sass-lint:disable no-vendor-prefixes
  &::-webkit-input-placeholder,
  &:-moz-placeholder,
  &-moz-placeholder,
  &-ms-input-placeholder {
    font-size: 0.75em;
  }
  // sass-lint:enable no-vendor-prefixes

  &.is-disabled,
  &[disabled],
  &.is-readonly,
  &[readonly] {
    border-color: var(--sgbp-input-border-color-disabled);
    color: var(--sgbp-input-color-disabled);
    cursor: not-allowed;
  }

  &.is-hidden {
    /* Hide input element while still preserving accessibility features (i.e. tab order) and ensuring that its value
     * gets submitted properly.
     * CSS properties such as display: none or visibility: hidden will not work out. The reasons are:
     * - the input value will not be sent to the server on form submit
     * - the input will be excluded out of tab order.
     */
    width: 0.1px; //Setting the property values to zero ends up throwing the element out of tab party in some browsers.
    height: 0.1px; //Setting the property values to zero ends up throwing the element out of tab party in some browsers.
    opacity: 0;
    overflow: hidden;
    position: absolute;
    z-index: -1;
  }

  &.is-invalid,
  &.ng-touched.ng-invalid {
    border-color: var(--sgbp-color-error);
  }

  &--small {
    height: var(--sgbp-input-small-height);
  }

  &--big {
    height: var(--sgbp-input-big-height);
  }
}

// sass-lint:disable no-qualifying-elements
textarea.sgbp-input {
  min-height: 7em;
}
// sass-lint:enable no-qualifying-elements

/********************************************************************************************************************
 * INPUT TYPE RANGE
 *
 * Using mixins is necessary to avoid code repetition as you can't comma-separate the selectors in this case.
 * Browsers will drop the entire selector if they don't understand a part of it.
 ********************************************************************************************************************/

@mixin sgbp-input-range-thumb {
  appearance: none;
  height: var(--sgbp-input-type-range-thumb-diameter);
  width: var(--sgbp-input-type-range-thumb-diameter);
  border: none;
  border-radius: 50%;
  background: var(--sgbp-input-type-range-thumb-color);
  cursor: pointer;
}

@mixin sgbp-input-range-track {
  width: 100%;
  height: var(--sgbp-input-type-range-track-height);
  cursor: pointer;
  background: var(--sgbp-input-type-range-track-color);
  border: none;
}

// sass-lint:disable no-vendor-prefixes no-qualifying-elements
input[type='range'].sgbp-input {
  appearance: none;
  padding: 0;
  width: 100%;
  border: none;
  background: none;

  &::-webkit-slider-thumb {
    @include sgbp-input-range-thumb;
    margin-top: var(--sgbp-input-type-range-thumb-margin);
  }

  &::-webkit-slider-runnable-track {
    @include sgbp-input-range-track;
    margin-bottom: 0.2rem;
  }

  &::-ms-thumb {
    @include sgbp-input-range-thumb;

    @supports (-ms-accelerator: true) or (-ms-ime-align: auto) {
      // Edge only
      margin-bottom: var(--sgbp-input-type-range-thumb-margin);
    }
  }

  &::-ms-track {
    @include sgbp-input-range-track;
    // IE won't let the thumb overflow the track thus we have to hack
    border-top: var(--sgbp-input-type-range-thumb-diameter) solid transparent;
    border-bottom: var(--sgbp-input-type-range-thumb-diameter) solid transparent;
    margin-top: calc((var(--sgbp-input-type-range-thumb-diameter) - var(--sgbp-input-type-range-track-height)) * -1);
    margin-bottom: calc((var(--sgbp-input-type-range-thumb-diameter) - var(--sgbp-input-type-range-track-height)) * -1);
    background-color: transparent;
    color: transparent; // remove default tick marks
  }

  &::-ms-fill-lower,
  &::-ms-fill-upper {
    height: var(--sgbp-input-type-range-track-height);
    background-color: var(--sgbp-input-type-range-track-color);
  }

  &::-ms-tooltip {
    display: none;
  }

  &::-moz-range-thumb {
    @include sgbp-input-range-thumb;
    margin-top: var(--sgbp-input-type-range-thumb-margin); /* You need to specify a margin in Chrome, but in Firefox and IE it is automatic */
  }

  &::-moz-focus-outer {
    border: 0;
  }

  &::-moz-range-track {
    @include sgbp-input-range-track;
  }

  &::-moz-range-progress {
    height: var(--sgbp-input-type-range-track-height);
    background-color: var(--sgbp-input-type-range-track-color);
  }

  &:focus {
    outline: none;
  }
}
// sass-lint:enable no-vendor-prefixes no-qualifying-elements
